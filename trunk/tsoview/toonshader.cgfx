/*********************************************************
   "ToonShader" for cgFxShader v0.91

                               (c) 2008 TechArts Inc.

   ( This file is a part of "3D Custom Girl" project. )
**********************************************************/
#define OBSIDIAN_3D
#define PROFILE_VS vs_2_0
#define PROFILE_PS ps_2_0

#define	MONO	0

// shader program spec. replace
#define	VertexProgram		VertexShader
#define	FragmentProgram		PixelShader

// texture wrap spec. replace
#define	WrapS				AddressU
#define	WrapT				AddressV
#define	REPEAT				WRAP

// filter value replace
#define	NEAREST				POINT

// depth test replace
#define	DepthTestEnable		ZEnable
#define	DepthMask			ZWriteEnable

// CullFace
#define	cw					CCW
#define	ccw					CW

// mul(A,B) -> mul(B,A)

#ifndef OBSIDIAN_3D
#define	PROFILE_VS	arbvp1
#define	PROFILE_PS	arbfp1
#endif
string Category		= "Effects\\Cg\\NPR";
string keywords		= "Non Photo-realistic";
string description	= "TA ToonShader v0.50";

//#define	SHADOW_HEIGHT	(-0.5)
#define	SHADOW_HEIGHT	(0.0)

//----------------------------------
//	tweakables
//----------------------------------
float	Ambient
<
	string UIName = "Ambient";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 0.0;

float	HighLight
<
	string UIName = "HighLight";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 0.0;

float Thickness
<
	string UIName = "Thickness";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
> = 0.001;

float ColorBlend
<
	string UIName = "ColorBlend";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float ShadeBlend
<
	string UIName = "ShadeBlend";
	string UIWidget = "Slider";
	float UIMin = -100.0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float HighLightBlend
<
	string UIName = "HighLightBlend";
	string UIWidget = "Slider";
	float UIMin =  0;
	float UIMax =  100.0;
	float UIStep = 0.001;
> = 10.0;

float HighLightPower
<
	string UIName = "HighLightPower";
	string UIWidget = "Slider";
	float UIMin = 0;
	float UIMax = 1000;
	float UIStep = 1;
> = 100;

float4	PenColor		: Diffuse
<
	string UIName =  "PenColor";
	string UIWidget = "Color";
> = { 0.0f, 0.0f, 0.0f, 1.0f };

float4	ShadowColor		: Diffuse
<
	string UIName =  "ShadowColor";
	string UIWidget = "Color";
> = { 0.0f, 0.0f, 0.0f, 1.0f };


float4 LightDir : Direction
<
> = { 0, 1.0, 0, 0 };

float4 LightDirForced : Direction
<
> = { 0, 0, -1, 0 };

float4 ColorRate
<
> = { 1, 1, 1, 1 };


float4 UVSCR
<
> = { 0, 0, 0, 0 };


float HohoAlpha
<
> = 1.0;

float ZamenAlpha0
<
> = 1.0;

float ZamenAlpha1
<
> = 1.0;

float ZamenAlpha2
<
> = 1.0;

float ZMat2ZOffset
<
> = 0.0;

texture	ShadeTex_texture;
texture	ColorTex_texture;
texture	texShadowMap;
texture	DesktopTexture;
texture	MojiTexture;

#if MONO
texture MonoPalette;
#endif

float4 ManColor
<
> = { 0.0, 1.0, 1.0, 0.4 };

//----------------------------------
//	un-tweakables
//----------------------------------
uniform float4x4	wld			: World;
uniform float4x4	wv			: WorldView;
uniform float4x4	wvp			: WorldViewProjection;
uniform float4x4	view		: View;
uniform float4x4	proj		: Projection;
uniform float4x4	lightview		: View;
uniform float4x4	lightproj		: Projection;

sampler2D ShadeTex = sampler_state
{
	Texture   = <ShadeTex_texture>;

	WrapS = CLAMP;
	WrapT = CLAMP;

	MagFilter = NONE;
	MinFilter = NONE;
	MipFilter = NONE;
};

sampler2D ColorTex = sampler_state
{
	Texture		= <ColorTex_texture>;

	WrapS = REPEAT;
	WrapT = REPEAT;

	MagFilter = LINEAR;
	MinFilter = LINEAR;
    MipFilter = NONE;
};

sampler2D ShadowMap = sampler_state
{
	Texture		= <texShadowMap>;

	WrapS = CLAMP;
	WrapT = CLAMP;

	MagFilter = LINEAR;
	MinFilter = LINEAR;
    MipFilter = NONE;
};

sampler2D DesktopTex = sampler_state
{
	Texture		= <DesktopTexture>;

	WrapS = REPEAT;
	WrapT = REPEAT;

	MagFilter = LINEAR;
	MinFilter = LINEAR;
    MipFilter = NONE;
};

sampler2D MojiTex = sampler_state
{
	Texture		= <MojiTexture>;

	WrapS = REPEAT;
	WrapT = REPEAT;

	MagFilter = LINEAR;
	MinFilter = LINEAR;
    MipFilter = NONE;
};

#if MONO
sampler2D MonoPal = sampler_state
{
	Texture   = <MonoPalette>;

	WrapS = CLAMP;
	WrapT = CLAMP;

	MagFilter = NONE;
	MinFilter = NONE;
	MipFilter = NONE;
};
#endif

const uniform float4x4	LocalBoneMats[16];

struct appdata {
	float3	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float4	Tangent		: TEXCOORD1;
	float4	Binormal	: TEXCOORD2;
	float4	Normal		: NORMAL;
	float4	VWeights	: TEXCOORD3;
	int4	BoneIdxs	: TEXCOORD4;
};

struct cVertexData {
	float4	Position	: POSITION;
	float2	UV			: TEXCOORD0;
	float3	Normal		: TEXCOORD1;
	float4	ZTex		: TEXCOORD2;
};

struct cVertexData2 {
	float4	Position	: POSITION;
};

struct cVertexData3 {
	float4	Position	: POSITION;
        float4  ShadowMapTex    : TEXCOORD0;
};

//-----------------------------------------------------------
//  スキン変形 (頂点／法線)
//-----------------------------------------------------------
void calc_skindeform(

	float4		ipos,
	float3		innor,
	float4		weights,
	int4		idxs,

	out float4	outpos,
	out float3	outnor
)
{
	float4x4	mb;
	float4		inor;
	float4		npos, nnor;
	float		w;

	inor  = float4( innor.xyz, 0 );

	w     = weights[0];
	mb    = LocalBoneMats[idxs[0]];
	npos  = mul( ipos, mb ) * w;
	nnor  = mul( inor, mb ) * w;

	w     = weights[1];
	mb    = LocalBoneMats[idxs[1]];
	npos += mul( ipos, mb ) * w;
	nnor += mul( inor, mb ) * w;

	w     = weights[2];
	mb    = LocalBoneMats[idxs[2]];
	npos += mul( ipos, mb ) * w;
	nnor += mul( inor, mb ) * w;

	w     = weights[3];
	mb    = LocalBoneMats[idxs[3]];
	npos += mul( ipos, mb ) * w;
	nnor += mul( inor, mb ) * w;

	outpos = float4( npos.xyz, 1 );
	outnor = nnor.xyz;
}

//-----------------------------------------------------------
//  スキン変形 (頂点のみ)
//-----------------------------------------------------------
void calc_skindeform_nonorm(

	float4		inpos,
	float4		weights,
	int4		idxs,

	out float4	outpos
)
{
	float4	npos;

	npos  = mul( inpos, LocalBoneMats[idxs[0]] ) * weights[0];
	npos += mul( inpos, LocalBoneMats[idxs[1]] ) * weights[1];
	npos += mul( inpos, LocalBoneMats[idxs[2]] ) * weights[2];
	npos += mul( inpos, LocalBoneMats[idxs[3]] ) * weights[3];

	outpos = float4( npos.xyz, 1 );
}

cVertexData3 cShadowMapVS( appdata IN )
{
   cVertexData3 OUT;
   float4 opos;
   calc_skindeform_nonorm( float4 ( IN.Position.xyz, 1 ), IN.VWeights, IN.BoneIdxs, opos );

   // 普通に world view projection
   float4x4 mat = wld;
   mat  = mul( mat, lightview );
   mat  = mul( mat, lightproj );
   OUT.Position = mul( opos, mat );
   
   // テクスチャ座標を頂点に合わせる
   OUT.ShadowMapTex = OUT.Position;

   return OUT;
}

cVertexData2 cInkVS( appdata IN )
{
	cVertexData2 OUT;
	float4 opos;
	float3 pos = IN.Position.xyz + ( IN.Normal.xyz * Thickness );
	calc_skindeform_nonorm( float4( pos.xyz, 1 ), IN.VWeights, IN.BoneIdxs, opos );

	OUT.Position = mul( float4( opos.xyz, 1 ), wvp );
	return OUT;
}

#if MONO

float4 toMono( float4 i )
{
	float n = ( i.r * 0.299 + i.g * 0.587 + i.b * 0.114 );
	float4	texcol = tex2D( MonoPal, float2( n, 0.5 ) );
	return float4( texcol.rgb, i.a );
}

float4 ColRate( float4 ic )
{
	return toMono( ic * ColorRate );
}

#else

float4 ColRate( float4 ic )
{
	return ic * ColorRate;
}

#endif

float4 cInkPS( cVertexData2 IN ) : COLOR
{
	return ColRate( PenColor );
}

cVertexData cMainVS2( appdata IN )
{
	cVertexData OUT;
	float4 pos; float3 nor;
	calc_skindeform( float4( IN.Position.xyz, 1.0 ), IN.Normal, IN.VWeights, IN.BoneIdxs, pos, nor );
	float4 p;
	p = mul( pos, wvp );
	p.z = 1.0 * p.w;
	OUT.Position	= p;
	OUT.UV			= IN.UV;
	OUT.Normal		= normalize( mul( float4( nor.xyz, 0 ), wld ) );
        float4x4 m = wld;
        m = mul( m, lightview );
        m = mul( m, lightproj );
        OUT.ZTex        = mul( p, m );
	return OUT;
}

cVertexData cMainVS3( appdata IN )
{
	cVertexData OUT;
	float4 pos; float3 nor;
	calc_skindeform( float4( IN.Position.xyz, 1.0 ), IN.Normal, IN.VWeights, IN.BoneIdxs, pos, nor );
	float4 p;
	p = mul( pos, wvp );
	p.z = p.z + ZMat2ZOffset;
	OUT.Position	= p;
	OUT.UV			= IN.UV;
	OUT.Normal		= normalize( mul( float4( nor.xyz, 0 ), wld ) );
        float4x4 m = wld;
        m = mul( m, lightview );
        m = mul( m, lightproj );
        OUT.ZTex        = mul( p, m );
	return OUT;
}

float4 cMainPS2( cVertexData IN ) : COLOR
{
	return float4( 0,0,0,0 );
}


cVertexData cMainVS( appdata IN )
{
	cVertexData OUT;
	float4 pos; float3 nor;
	calc_skindeform( float4( IN.Position.xyz, 1.0 ), IN.Normal, IN.VWeights, IN.BoneIdxs, pos, nor );
	OUT.Position	= mul( pos, wvp );
	OUT.UV			= IN.UV;
	OUT.Normal		= normalize( mul( float4( nor.xyz, 0 ), wld ) );
        float4x4 m = wld;
        m = mul( m, lightview );
        m = mul( m, lightproj );
        OUT.ZTex        = mul( pos, m );
	return OUT;
}

cVertexData cMainVS_UVSCR( appdata IN )
{
	cVertexData OUT;
	float4 pos; float3 nor;
	calc_skindeform( float4( IN.Position.xyz, 1.0 ), IN.Normal, IN.VWeights, IN.BoneIdxs, pos, nor );
	OUT.Position	= mul( pos, wvp );
	OUT.UV			= IN.UV + float2( UVSCR.xy );
	OUT.Normal		= normalize( mul( float4( nor.xyz, 0 ), wld ) );
        float4x4 m = wld;
        m = mul( m, lightview );
        m = mul( m, lightproj );
        OUT.ZTex        = mul( pos, m );
	return OUT;
}

float4 cShadowMapPS( float4 ShadowMapTex : TEXCOORD0 ) : COLOR
{
   // Z値算出
   float depth = ShadowMapTex.z / ShadowMapTex.w;
   // 精度を上げる
   float4 unpacked_depth = float4( 0.0, 0.0, 256.0, 256.0 );
   unpacked_depth.g = modf( depth*256.0, unpacked_depth.r );
   unpacked_depth.b *= modf( unpacked_depth.g*256.0, unpacked_depth.g );
   return unpacked_depth / 256.0;
}

float4 cMainPS( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );

        float2 texcoord;
        texcoord.x = ( 1.0 + IN.ZTex.x/IN.ZTex.w ) * 0.5;
        texcoord.y = ( 1.0 - IN.ZTex.y/IN.ZTex.w ) * 0.5;
        float4 c = tex2D( ShadowMap, texcoord );
        float z = c.r + (c.g + c.b/256.0)/256.0;
        if ( IN.ZTex.z / IN.ZTex.w > z + 1.0/256.0 )
        {
                L = -1.0; /* depth-buffer-shadow */
        }
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old
	//col += hl * HighLightBlend;

	return ColRate( float4( col.rgb, texcol.a ) );
}


float4 cMainPSDT( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( DesktopTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old
	//col += hl * HighLightBlend;

	return ColRate( float4( col.rgb, texcol.a ) );
}


float4 cMainPS_Moji( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( MojiTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old
	//col += hl * HighLightBlend;

	return ColRate( float4( col.rgb, texcol.a ) );
}


float4 cHohoPS( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old

	return ColRate( float4( col.rgb, texcol.a * HohoAlpha ) );
}

float4 cZamn0PS( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old

	return ColRate( float4( col.rgb, texcol.a * ZamenAlpha0 ) );
}

float4 cZamn1PS( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old

	return ColRate( float4( col.rgb, texcol.a * ZamenAlpha1 ) );
}

float4 cZamn2PS( cVertexData IN ) : COLOR
{
	float	L		 = dot( IN.Normal, -LightDirForced );
	float	lp		 = min( 1.0, max( 0.0, ( L * 0.6   ) + ( Ambient   * 0.01 ) ) );
	float	hp0		 = min( 1.0, max( 0.0, ( L * 0.708 ) + ( HighLight * 0.01 ) ) );
	float	hp		 = pow( hp0, HighLightPower );

	float4	shadecol = tex2D( ShadeTex, float2( lp, 0.5 ) );
	float4	texcol   = tex2D( ColorTex, IN.UV  );
	float4	hl		 = float4( hp, hp, hp, 1.0 );

	float4	col;
	col = ( texcol * ( ColorBlend * 0.1 ) ) * ( shadecol * ( ShadeBlend * 0.1 ) );
	col += hl * ( HighLightBlend * 0.0025 ); // old

	return ColRate( float4( col.rgb, texcol.a * ZamenAlpha2 ) );
}


cVertexData2 cShadowVS( appdata IN )
{
	cVertexData2 OUT;
	float4 opos, pos;
	calc_skindeform_nonorm( float4( IN.Position.xyz, 1 ), IN.VWeights, IN.BoneIdxs, opos );
	pos = mul( opos, wld ); pos.y = SHADOW_HEIGHT;
	OUT.Position = mul( mul( pos, view ), proj );
	return OUT;
}

float4 cTrnsPS( cVertexData IN ) : COLOR
{
	return ColRate( ManColor );
}

float4 cShadowPS( cVertexData2 IN ) : COLOR
{
	return ColRate( ShadowColor );
}

technique ShadowMap
{
	pass ShadowMap
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowMapVS();
		FragmentProgram	= compile PROFILE_PS cShadowMapPS();
	}
}

#define MAIN_SW		(1)
#define INK_SW		(1)
#define SHADOW_SW	(0)

technique ShadowOff
{
/*
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
*/
#if INK_SW
	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= cw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram = compile PROFILE_PS cInkPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}


technique ShadowOn
{
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
#if INK_SW
	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= cw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram	= compile PROFILE_PS cInkPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique ShadowOff_InkOff
{
/*
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
*/
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique ShadowOn_InkOff
{
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique Transparent
{
	pass Main
	{
		ZEnable				= true;
		ZWriteEnable		= false;
		CullMode			= none;
		AlphaBlendEnable	= true;
		AlphaTestEnable		= false;

		StencilFunc			= equal;
		StencilRef			= 0;
		StencilMask			= 255;
		StencilPass			= incrsat;
		StencilFail			= keep;
		StencilZFail		= replace;
		StencilEnable		= true;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cTrnsPS();
	}
}

technique NAT_ShadowOff_InkOff
{
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc       = always;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique NAT_ShadowOff
{
#if MAIN_SW
	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= cw;
		AlphaBlendEnable= true;
		AlphaFunc       = always;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram = compile PROFILE_PS cInkPS();
	}

	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		AlphaFunc       = always;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique NAT_ShadowOn
{
#if SHADOW_SW

	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= false;
		AlphaFunc = always;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
#if INK_SW
	pass Ink
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= cw;
		AlphaBlendEnable= false;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram	= compile PROFILE_PS cInkPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable= true;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}

technique DEMO
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = true;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}

technique DEMO_DT
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = true;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPSDT();
	}
}

technique DEMO_ADD
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		SrcBlend         = srcalpha;
		DestBlend        = one;
		StencilEnable	 = false;
		AlphaTestEnable  = false;
		AlphaFunc        = always;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}


technique HOHO
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable    = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cHohoPS();
	}
}

technique ZAMEN0
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable    = false;
		AlphaTestEnable  = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cZamn0PS();
	}
}

technique ZAMEN1
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable    = false;
		AlphaTestEnable  = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cZamn1PS();
	}
}

technique ZAMEN2
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable    = false;
		AlphaTestEnable  = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cZamn2PS();
	}
}


technique NZ_ShadowOff
{
#if INK_SW
	pass Ink
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = cw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram = compile PROFILE_PS cInkPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
#endif
}


technique NZ_ShadowOn
{
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable = true;
		DepthMask		= true;
		CullMode		= ccw;
		AlphaBlendEnable = false;
		AlphaFunc       = greaterequal;
		StencilEnable	= false;

		VertexProgram	= compile PROFILE_VS cShadowVS();
		FragmentProgram	= compile PROFILE_PS cShadowPS();
	}
#endif
#if INK_SW
	pass Ink
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = cw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram	= compile PROFILE_PS cInkPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
#endif
}

technique NZ_ShadowOff_InkOff
{
#if MAIN_SW
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
#endif
}

technique NZ_ShadowOn_InkOff
{
#if SHADOW_SW
	pass Shadow
	{
		DepthTestEnable  = true;
		DepthMask		 = true;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cShadowVS();
		FragmentProgram	 = compile PROFILE_PS cShadowPS();
	}
#endif
#if MAIN_SW
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
#endif
}

technique NZAT_ShadowOff_InkOff
{
#if MAIN_SW
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
#endif
}

technique ZMAT
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = true;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		ZFunc            = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS2();
		FragmentProgram	 = compile PROFILE_PS cMainPS2();
	}
}

technique ZMAT2
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = true;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		ZFunc            = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS3();
		FragmentProgram	 = compile PROFILE_PS cMainPS2();
	}
}


technique NCZAT_ShadowOff_InkOff
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = none;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
}

technique KAZAN
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		SrcBlend         = srcalpha;
		DestBlend        = one;
		AlphaFunc        = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
}

technique AURORA
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS_UVSCR();
		FragmentProgram	 = compile PROFILE_PS cMainPS();
	}
}

technique MOJI
{
	pass Main
	{
		DepthTestEnable  = true;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = always;
		StencilEnable	 = false;

		VertexProgram	 = compile PROFILE_VS cMainVS();
		FragmentProgram	 = compile PROFILE_PS cMainPS_Moji();
	}
}

technique POSEEDIT_UI
{
	pass Ink
	{
		DepthTestEnable  = false;
		DepthMask		 = false;
		CullMode		 = cw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cInkVS();
		FragmentProgram = compile PROFILE_PS cInkPS();
	}

	pass Main
	{
		DepthTestEnable  = false;
		DepthMask		 = false;
		CullMode		 = ccw;
		AlphaBlendEnable = true;
		AlphaFunc        = greaterequal;
		StencilEnable	 = false;

		VertexProgram	= compile PROFILE_VS cMainVS();
		FragmentProgram	= compile PROFILE_PS cMainPS();
	}
}
